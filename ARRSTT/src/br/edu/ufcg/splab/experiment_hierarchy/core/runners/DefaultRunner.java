package br.edu.ufcg.splab.experiment_hierarchy.core.runners;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import br.edu.ufcg.splab.experiment_hierarchy.core.datacollectors.DependentVariableCollector;
import br.edu.ufcg.splab.experiment_hierarchy.core.treatments.ExecutableTreatment;
import br.edu.ufcg.splab.experiment_hierarchy.util.ExperimentFile;
import br.edu.ufcg.splab.experiment_hierarchy.util.Tuple;

/* Change		Author		Date
 * Creation		Wesley		2015-09-13
 */
/**
* Objective: This interface represents a runner that
* is responsible for getting a list of ExecutableTreatment's
* tuple and execute them, collecting the experiment's dependent
* variables while doing so.
* 
* Description of use: This is used in the Experiment class, so it
* can get a SetUp's combinations.
*
*/
public class DefaultRunner implements InterfaceRunner {
	private List<DependentVariableCollector> dvcs;
	private List<StringBuffer> stringBuffers;
	
	/**
	 * The constructor that receives a list of dependent
	 * variable collectors and initialize the StringBuffers
	 * that are going to contain the dependent variables' data.
	 * 
	 * @param dvcs
	 * 			The list of the DependentVariableCollectors for 
	 * 			this experiment.
	 */
	public DefaultRunner(List<DependentVariableCollector> dvcs) {
		this.dvcs = dvcs;
		this.stringBuffers = new ArrayList<StringBuffer>();
		
		for (int i = 0; i < dvcs.size(); i++) {
			stringBuffers.add(new StringBuffer());
		}
	}
	
	@Override
	/**
	 * Objective: this method is responsible for getting a 
	 * list of ExecutableTreatment's tuple and execute them,
	 * collecting the experiment's dependent variables and
	 * saving them in StringBuffers while doing so.
	 * 
	 * Exemple of use: Used in the Experiment's method to execute
	 * the experiment.
	 * @param combinations
	 * 			The combinations generated by a set up.
	 */
	public void runExperiment(List<Tuple<ExecutableTreatment>> combinations) {
		for (Tuple<ExecutableTreatment> combination : combinations) {
			for (int i = 0; i < dvcs.size(); i++) {
				dvcs.get(i).collect(combination, stringBuffers.get(i));
			}				
		}
		
		saveBuffers();
	}
	
	/**
	 * Objective: Return the StringBuffers that contains
	 * the experiment data.
	 * 
	 * Exemple of use: In a class that gets the experiment's
	 * data and write it in a file.
	 * 
	 * @return The StringBuffers containing the execution's
	 * data.
	 */
	public List<StringBuffer> getStringBuffers() {
		return stringBuffers;
	}
	
	/**
	 * Objective: Save the StringBuffer's data in a file.
	 */
	public void saveBuffers() {
		int n = 0;
		
		for (StringBuffer buffer: stringBuffers) {
			try {
				ExperimentFile file = new ExperimentFile("file" + n);
				file.appendContent(buffer);
				file.save();
				n++;
			} catch(IOException e) {
				e.printStackTrace();
			}
		}
	}
}
