package br.edu.ufcg.splab.experiment_hierarchy.selections;

import java.util.Random;

import br.edu.ufcg.splab.experiment_hierarchy.util.matrix.Matrix;
import br.edu.ufcg.splab.experiment_hierarchy.util.matrix.SimilarityStructure;
import br.edu.ufcg.splab.experiment_hierarchy.util.testcollections.TestSuite;

/*
 * Change														Author				Date
 * -------------------------------------------------------------------------------------------
 * Creation														Wesley Silva		2015-08-17
 * 
 */
/**
 * <b>Objective:</b> Generate a sub set that is generated by members of a bigger set
 * selected through the principle of similarity.<br>
 * <br>
 * <b>Description of use:</b> In the Experiment Factory this class is used in the
 * process of building a selection.
 *
 */
public class BySimilaritySelector implements InterfaceTestCaseSelector {
	private Matrix matrix;

	public BySimilaritySelector() {

	}

	public TestSuite select(TestSuite testSuite, Double percentage) {
		matrix = new SimilarityStructure(testSuite);
		int selectingAmount = (int) Math.ceil(testSuite.size() * percentage);
		int limitIterations = testSuite.size() - selectingAmount;
		TestSuite selectedTS = new TestSuite(testSuite);

		for (int i = 0; i < limitIterations; i++) {
			int removingPosition = chooseRemoval(testSuite);
			removeFromMatrix(removingPosition);
			selectedTS.nulify(removingPosition);
		}

		cleanTestSuite(selectedTS);
		return selectedTS;
	}

	/**
	 * <b>Objective:</b> Determine which of the test cases that compose the given test
	 * suite should be removed.
	 * <br>
	 * <b>Exemple of use:</b> This method is used in the method select.
	 * 
	 * @param testSuite
	 *            The test suit where the selection will occur.
	 * @return The test case that must be removed.
	 */
	private int chooseRemoval(TestSuite testSuite) {
		int[] maxPos = matrix.findMaxPos();

		if (testSuite.get(maxPos[0]).size() < testSuite.get(maxPos[1]).size()) {
			return maxPos[0];
		} else if (testSuite.get(maxPos[1]).size() < testSuite.get(maxPos[0])
				.size()) {
			return maxPos[1];
		} else {
			Random randomGenerator = new Random();
			return maxPos[randomGenerator.nextInt(2)];
		}
	}

	/**
	 * <b>Objective:</b> Alter the matrix used to help in the process of selecting test
	 * cases.
	 * <br>
	 * <b>Exemple of use:</b> This method is used in the method select. It removes
	 * a position from a matrix.
	 * 
	 * @param pos
	 *            the position that must be removed from the matrix
	 */
	private void removeFromMatrix(int pos) {
		matrix.removeCol(pos);
		matrix.removeRow(pos);
	}

	/**
	 * <b>Objective:</b> Take the nulls from the test suite constructed in the
	 * selection.
	 * <br>
	 * <<b>Exemple of use:</b> This method is used in the method select. It receives
	 * a test suite and removes the nulls in it.
	 * 
	 * @param selectedTS
	 * 			The test suit that contains the selected test cases.
	 */
	private void cleanTestSuite(TestSuite selectedTS) {
		for (int i = selectedTS.size() - 1; i >= 0; i--)
			if (selectedTS.get(i) == null)
				selectedTS.remove(i);
	}
}